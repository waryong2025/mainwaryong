<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>종로 08번 근무현황표 생성기</title>
    <style>
        body {
            font-family: Arial, sans-serif; margin: 10px;
            background-color: #f4f4f4; color: #333;
        }
        .controls {
            background-color: #fff; padding: 15px; border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); margin-bottom: 15px;
            display: flex; flex-wrap: wrap; gap: 10px; align-items: center;
        }
        .controls label { font-weight: bold; margin-right: 5px; }
        .controls input[type="number"], .controls select {
            padding: 6px; border: 1px solid #ddd; border-radius: 4px;
            width: 70px; box-sizing: border-box;
        }
        .controls input[type="radio"] { margin-left: 10px; }
        .controls button, .controls a.button-link {
            padding: 8px 15px; color: white; border: none; border-radius: 4px;
            cursor: pointer; font-size: 15px; margin-right: 8px;
            text-decoration: none; display: inline-block; text-align: center; white-space: nowrap;
        }
        .controls button { background-color: #007bff; }
        .controls button:hover { background-color: #0056b3; }
        .controls a.button-link { background-color: #17a2b8; }
        .controls a.button-link:hover { background-color: #138496; }
        .controls button.btn-danger { background-color: #dc3545; }
        .controls button.btn-danger:hover { background-color: #c82333; }

        #scheduleContainer {
            background-color: white; padding: 10px; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin: 20px auto; max-width: 95%; overflow-x: auto;
        }
        table {
            width: 100%; min-width: 1200px; border-collapse: collapse;
            margin: 0 auto; font-size: 0.9em; background-color: #fff; table-layout: fixed;
        }
        th, td {
            border: 1px solid #ddd; padding: 6px; text-align: center;
            vertical-align: top; line-height: 1.1; word-break: keep-all;
            height: 38px; box-sizing: border-box;
        }
        th { background-color: #f2f2f2; font-weight: bold; }
        caption {
            font-size: 1.2em; margin-bottom: 10px; font-weight: bold;
            color: #333; text-decoration: underline;
        }
        .sunday { background-color: #ffe0e0; }
        .saturday { background-color: #e0e0ff; }
        .holiday { background-color: #ffcccc; font-weight: bold; color: #cc0000; }
        .edit-mode {
            position: relative; padding: 2px; display: flex; flex-direction: column;
            justify-content: center; height: 100%;
        }
        .edit-mode input {
            width: calc(100% - 8px); margin-bottom: 2px;
            padding: 2px; box-sizing: border-box;
        }
        .edit-mode .cell-buttons { display: flex; justify-content: space-around; margin-top: 2px; }
        .edit-mode .cell-buttons button {
            padding: 3px 5px; font-size: 0.7em; color: white; border: none;
            border-radius: 3px; cursor: pointer; white-space: nowrap;
        }
        .edit-mode .cell-buttons button.btn-fixed { background-color: #28a745; }
        .edit-mode .cell-buttons button.btn-temp { background-color: #ffc107; }
        .edit-mode .cell-buttons button.btn-delete { background-color: #dc3545; }
        .edit-mode .cell-buttons .btn-highlight-am { background-color: #ff8c00; }
        .edit-mode .cell-buttons .btn-highlight-pm { background-color: #ff8c00; }
        .edit-mode input[data-bold="true"] { font-weight: bold; }

        .name-entry { display: block; margin-top: 2px; margin-bottom: 2px; }
        .name-entry.bold-name { font-weight: bold; }

        table th:nth-child(1),
        table td:nth-child(1),
        table th:nth-child(2),
        table td:nth-child(2) {
            width: 2%;
            min-width: 30px;
        }
        
        @media print {
            @page {
                size: A4;
                margin: 10mm;
            }
            body {
                background-color: white; margin: 0; padding: 0;
                -webkit-print-color-adjust: exact;
            }
            .controls { display: none; }
            #scheduleContainer { box-shadow: none; margin: 0; padding: 0; }
            table {
                width: 100%;
                min-width: unset;
                font-size: 0.7em;
                border: 1px solid #000;
                table-layout: fixed;
            }
            th, td { padding: 1px; height: auto; word-break: break-all; }

            table th:nth-child(1),
            table td:nth-child(1),
            table th:nth-child(2),
            table td:nth-child(2) {
                width: 2%;
            }
        }
        @media screen and (max-width: 768px) {
            .controls { flex-direction: column; align-items: stretch; }
            .controls input[type="number"], .controls select, .controls button, .controls a.button-link { width: 100%; box-sizing: border-box; margin: 5px 0; }
            #scheduleContainer { padding: 5px; }
            table { font-size: 0.8em; }
            th, td { padding: 4px; }
        }
    </style>
</head>
<body>
    <div class="controls">
        <label for="yearInput">년도:</label>
        <input type="number" id="yearInput" value="2025">
        <label for="monthInput">월:</label>
        <input type="number" id="monthInput" value="9">
        
        <input type="radio" id="option1" name="displayOption" value="1" checked>
        <label for="option1">1일 ~ 15일</label>
        <input type="radio" id="option2" name="displayOption" value="2">
        <label for="option2">16일 ~ 말일</label>
        
        <button onclick="generateSchedule()">생성</button>
        <button onclick="printPage()">인쇄</button>
        <button class="btn-danger" onclick="resetAllFixedSchedules()">전체 고정 초기화</button>
        <a href="https://waryong2025.github.io/timeman/" class="button-link" target="_blank">07번 배차표</a>
        <a href="https://waryong2025.github.io/townbus/" class="button-link" target="_blank">08번배차표</a>
    </div>
    <div id="scheduleContainer">
        <table>
            <caption id="tableCaption">종로 08번 2025년 9월 1일 ~ 15일까지 근무현황표</caption>
            <thead id="scheduleHeader">
            </thead>
            <tbody id="scheduleBody">
            </tbody>
        </table>
    </div>
    <script>
        const VEHICLE_COLUMNS = ['3611호', '5510호', '3615호', '스피아', '3612호', '6201호', '5504호', '5535호', '5536호', '3614호', '비고'];
        const STORAGE_KEY_FIXED = 'jongro08FixedSchedule';
        const STORAGE_KEY_TEMP = 'jongro08TempSchedule';

        // 두 개의 다른 저장 공간 사용: 고정 규칙은 날짜-요일 규칙으로, 임시 규칙은 특정 날짜의 데이터로
        let fixedScheduleData = JSON.parse(localStorage.getItem(STORAGE_KEY_FIXED)) || {};
        let tempScheduleData = JSON.parse(localStorage.getItem(STORAGE_KEY_TEMP)) || {};
        
        let scheduleData = {};

        function getDayName(dayOfWeek) {
            const days = ['일', '월', '화', '수', '목', '금', '토'];
            return days[dayOfWeek];
        }

        function isPublicHoliday(date) {
            const year = date.getFullYear();
            const month = date.getMonth() + 1;
            const day = date = date.getDate();
            const holidays = [
                // { month: 1, day: 1, name: '신정' },
                // { month: 3, day: 1, name: '삼일절' },
            ];
            return holidays.some(h => h.month === month && h.day === day);
        }

        function renderCellContent(names) {
            if (!names || names.length === 0) return '';
            return names.map(item =>
                `<span class="name-entry ${item.bold ? 'bold-name' : ''}">${item.text}</span>`
            ).join('');
        }
        
        function editCell(cell, colId, dateString, dayOfWeek) {
            if (cell.classList.contains('edit-mode')) return;
            document.querySelectorAll('.edit-mode').forEach(editCell => {
                const prevColId = editCell.dataset.colId;
                const prevDateString = editCell.dataset.dateString;
                const originalNames = (scheduleData[prevDateString] && scheduleData[prevDateString][prevColId]) || [{ text: '', bold: false }, { text: '', bold: false }];
                editCell.classList.remove('edit-mode');
                editCell.innerHTML = renderCellContent(originalNames);
            });

            const currentNames = (scheduleData[dateString] && scheduleData[dateString][colId]) || [{ text: '', bold: false }, { text: '', bold: false }];
            const morningValue = currentNames[0] ? currentNames[0].text : '';
            const afternoonValue = currentNames[1] ? currentNames[1].text : '';

            cell.classList.add('edit-mode');
            cell.dataset.colId = colId;
            cell.dataset.dateString = dateString;
            cell.dataset.dayOfWeek = dayOfWeek;
            cell.innerHTML = `
                <input type="text" class="morning-input" value="${morningValue}" placeholder="오전" data-bold="${currentNames[0].bold}">
                <input type="text" class="afternoon-input" value="${afternoonValue}" placeholder="오후" data-bold="${currentNames[1].bold}">
                <div class="cell-buttons">
                    <button class="btn-fixed" onclick="saveFixedCell(this.parentNode.parentNode)">고정</button>
                    <button class="btn-temp" onclick="saveTempCell(this.parentNode.parentNode)">임시</button>
                    <button class="btn-highlight-am" onclick="highlightCell(this.parentNode.parentNode, 'am')">오전 강조</button>
                    <button class="btn-highlight-pm" onclick="highlightCell(this.parentNode.parentNode, 'pm')">오후 강조</button>
                    <button class="btn-delete" onclick="deleteCell(this.parentNode.parentNode)">삭제</button>
                </div>
            `;
            cell.querySelector('.morning-input').focus();
        }
        
        function getNamesAndBoldStateFromCell(cellElement) {
            const morningInput = cellElement.querySelector('.morning-input');
            const afternoonInput = cellElement.querySelector('.afternoon-input');
            const morningText = morningInput.value.trim();
            const afternoonText = afternoonInput.value.trim();

            const morningBold = morningInput.dataset.bold === 'true';
            const afternoonBold = afternoonInput.dataset.bold === 'true';
            
            return [
                { text: morningText, bold: morningBold },
                { text: afternoonText, bold: afternoonBold }
            ];
        }
        
        function highlightCell(cellElement, timeOfDay) {
            let inputElement;
            if (timeOfDay === 'am') {
                inputElement = cellElement.querySelector('.morning-input');
            } else if (timeOfDay === 'pm') {
                inputElement = cellElement.querySelector('.afternoon-input');
            }

            if (inputElement) {
                const isCurrentlyBold = inputElement.dataset.bold === 'true';
                inputElement.dataset.bold = !isCurrentlyBold;
                inputElement.style.fontWeight = inputElement.dataset.bold === 'true' ? 'bold' : 'normal';
            }
        }

        function saveFixedCell(cellElement) {
            const { colId, dayOfWeek, dateString } = cellElement.dataset;
            const namesToSave = getNamesAndBoldStateFromCell(cellElement);

            const recurringKey = `${dayOfWeek}-${colId}`;
            if (!fixedScheduleData[recurringKey]) {
                fixedScheduleData[recurringKey] = [];
            }

            fixedScheduleData[recurringKey] = fixedScheduleData[recurringKey].filter(
                entry => entry.dateString !== dateString
            );

            fixedScheduleData[recurringKey].push({
                dateString: dateString,
                names: namesToSave
            });
            fixedScheduleData[recurringKey].sort((a, b) => new Date(b.dateString) - new Date(a.dateString));

            localStorage.setItem(STORAGE_KEY_FIXED, JSON.stringify(fixedScheduleData));
            generateSchedule();
        }
        
        function saveTempCell(cellElement) {
            const { colId, dateString } = cellElement.dataset;
            const namesToSave = getNamesAndBoldStateFromCell(cellElement);

            if (!tempScheduleData[dateString]) {
                tempScheduleData[dateString] = {};
            }
            tempScheduleData[dateString][colId] = namesToSave;
            
            localStorage.setItem(STORAGE_KEY_TEMP, JSON.stringify(tempScheduleData));
            generateSchedule();
        }
        
        function deleteCell(cellElement) {
            const { colId, dayOfWeek, dateString } = cellElement.dataset;
            const recurringKey = `${dayOfWeek}-${colId}`;

            // 고정 스케줄에서 삭제
            if (fixedScheduleData[recurringKey]) {
                fixedScheduleData[recurringKey] = fixedScheduleData[recurringKey].filter(
                    entry => entry.dateString !== dateString
                );
                if (fixedScheduleData[recurringKey].length === 0) {
                    delete fixedScheduleData[recurringKey];
                }
                localStorage.setItem(STORAGE_KEY_FIXED, JSON.stringify(fixedScheduleData));
            }

            // 임시 스케줄에서 삭제
            if (tempScheduleData[dateString] && tempScheduleData[dateString][colId]) {
                delete tempScheduleData[dateString][colId];
                if (Object.keys(tempScheduleData[dateString]).length === 0) {
                    delete tempScheduleData[dateString];
                }
                localStorage.setItem(STORAGE_KEY_TEMP, JSON.stringify(tempScheduleData));
            }
            
            generateSchedule();
        }

        function resetAllFixedSchedules() {
            if (confirm("저장된 모든 고정 근무표를 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.")) {
                fixedScheduleData = {};
                localStorage.removeItem(STORAGE_KEY_FIXED);
                if (confirm("임시 근무표도 함께 초기화하시겠습니까?")) {
                    tempScheduleData = {};
                    localStorage.removeItem(STORAGE_KEY_TEMP);
                }
                generateSchedule();
                alert("모든 근무표가 초기화되었습니다.");
            }
        }

        function generateSchedule() {
            const year = parseInt(document.getElementById('yearInput').value);
            const month = parseInt(document.getElementById('monthInput').value);
            const selectedOption = document.querySelector('input[name="displayOption"]:checked').value;
            
            const scheduleHeader = document.getElementById('scheduleHeader');
            const scheduleBody = document.getElementById('scheduleBody');
            const tableCaption = document.getElementById('tableCaption');
            
            scheduleData = {};

            const headerHTML = `<tr><th style="width: 2%;">월일</th><th style="width: 2%;">요일</th>${VEHICLE_COLUMNS.map(c => `<th>${c}</th>`).join('')}</tr>`;
            scheduleHeader.innerHTML = headerHTML;
            scheduleBody.innerHTML = '';

            const startDate = new Date(year, month - 1, selectedOption === '1' ? 1 : 16);
            const endDate = (selectedOption === '1')
                ? new Date(year, month - 1, 15)
                : new Date(year, month, 0);

            tableCaption.textContent = `종로 08번 ${year}년 ${month}월 ${startDate.getDate()}일 ~ ${endDate.getDate()}일까지 근무현황표`;

            for (let d = new Date(startDate); d <= endDate; d.setDate(d.getDate() + 1)) {
                const dayOfWeek = d.getDay();
                const dateString = d.toISOString().slice(0, 10);
                
                let cellsContent = {};
                VEHICLE_COLUMNS.forEach(colId => {
                    let appliedNames = [{ text: '', bold: false }, { text: '', bold: false }];

                    // 1. 임시 데이터 먼저 확인
                    if (tempScheduleData[dateString] && tempScheduleData[dateString][colId]) {
                        appliedNames = tempScheduleData[dateString][colId];
                    }
                    // 2. 임시 데이터가 없으면 고정 규칙 확인
                    else {
                        const recurringKey = `${dayOfWeek}-${colId}`;
                        if (fixedScheduleData[recurringKey]) {
                            for (const entry of fixedScheduleData[recurringKey]) {
                                if (new Date(dateString) >= new Date(entry.dateString)) {
                                    appliedNames = entry.names;
                                    break;
                                }
                            }
                        }
                    }
                    cellsContent[colId] = appliedNames;
                });
                scheduleData[dateString] = cellsContent;
                
                let rowClass = isPublicHoliday(d) ? 'holiday' : '';
                if (!rowClass) {
                    if (dayOfWeek === 0) rowClass = 'sunday';
                    else if (dayOfWeek === 6) rowClass = 'saturday';
                }

                const dataCellsHTML = VEHICLE_COLUMNS.map(colId =>
                    `<td onclick="editCell(this, '${colId}', '${dateString}', ${dayOfWeek})">${renderCellContent(cellsContent[colId])}</td>`
                ).join('');

                scheduleBody.insertAdjacentHTML('beforeend', `
                    <tr class="${rowClass}">
                        <td>${d.getDate()}</td>
                        <td>${getDayName(dayOfWeek)}</td>
                        ${dataCellsHTML}
                    </tr>`);
            }
        }

        function printPage() {
            document.querySelectorAll('.edit-mode').forEach(cell => {
                const { colId, dateString } = cell.dataset;
                const originalNames = (scheduleData[dateString] && scheduleData[dateString][colId]) || [{ text: '', bold: false }, { text: '', bold: false }];
                cell.classList.remove('edit-mode');
                cell.innerHTML = renderCellContent(originalNames);
            });
            window.print();
        }
        
        document.addEventListener('DOMContentLoaded', () => {
            const today = new Date();
            document.getElementById('yearInput').value = today.getFullYear();
            document.getElementById('monthInput').value = today.getMonth() + 1;
            const currentDay = today.getDate();
            if (currentDay <= 15) {
                document.getElementById('option1').checked = true;
            } else {
                document.getElementById('option2').checked = true;
            }
            generateSchedule();
        });
    </script>
</body>
</html>